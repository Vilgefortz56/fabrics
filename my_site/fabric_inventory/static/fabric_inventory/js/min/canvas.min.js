const rawData=document.getElementById("fabricData").textContent,fabricData=JSON.parse(rawData);function updateViewOptions(){const e=document.getElementById("categorySelect").value,t=document.getElementById("viewSelect");t.innerHTML="",e&&fabricData[e]&&fabricData[e].forEach((function(e,n){const o=document.createElement("option");o.value=e.id,o.textContent=e.name,t.appendChild(o),0===n&&(t.value=e.id)}))}document.getElementById("categorySelect").addEventListener("change",updateViewOptions),document.addEventListener("DOMContentLoaded",(function(){updateViewOptions()}));const inputArea=document.getElementById("inputArea");let current_area=0;window.onload=function(){document.getElementById("inputArea").value=""};const stage=new Konva.Stage({container:"canvasContainer",width:1300,height:750});stage.getContainer().style.border="1px solid black",stage.setAttr("clickedOnLine",!1);const gridLayer=new Konva.Layer,contentLayer=new Konva.Layer;stage.add(gridLayer,contentLayer);let isSelectMode=!1,gridSize=parseInt(document.getElementById("gridSize").value)||50;function drawGrid(e){gridLayer.destroyChildren();const t=stage.width(),n=stage.height();for(let o=0;o<t;o+=e)gridLayer.add(new Konva.Line({points:[o,0,o,n],stroke:"#ddd",strokeWidth:1}));for(let o=0;o<n;o+=e)gridLayer.add(new Konva.Line({points:[0,o,t,o],stroke:"#ddd",strokeWidth:1}));gridLayer.draw()}drawGrid(gridSize),document.getElementById("gridSize").addEventListener("input",(function(){gridSize=parseInt(this.value),drawGrid(gridSize)}));let currentMode="select",selectedObjects=[];const selectToolButton=document.getElementById("selectTool"),drawPol=document.getElementById("drawPolylineTool"),addLineLabelButton=document.getElementById("addLineLabel"),saveDataButton=document.getElementById("saveData"),calculateAreaButton=document.getElementById("calculateArea"),setDirectionArea=document.getElementById("addDirectionArea");function setActiveButton(e){[selectToolButton,drawPol,addLineLabelButton,setDirectionArea].forEach((e=>e.classList.remove("bg-secondary","text-white","active-button"))),e.classList.add("bg-secondary","text-white","active-button")}function snapToGrid(e,t){return Math.round(e/t)*t}setDirectionArea.addEventListener("click",(function(){currentMode="addDirectionArea",startDrawingContour(),isSelectMode=!1,setMode(currentMode),setActiveButton(this)})),addLineLabelButton.addEventListener("click",(function(){currentMode="addLineLabel",isAddingLabels=!isAddingLabels,setActiveButton(this)})),selectToolButton.addEventListener("click",(function(){currentMode="select",setMode(currentMode),isSelectMode=!0,setActiveButton(this)})),drawPol.addEventListener("click",(function(){currentMode="drawPolyLine",isSelectMode=!1,setMode(currentMode),setActiveButton(this)}));let selectedLineGroup=null,selectedLabelGroup=null;function addEditableLine(e,t,n,o){const i=`line-${Date.now()}-${Math.random()}`,r=new Konva.Group({draggable:!0,name:"selectable",id:i}),a=new Konva.Line({points:[e,t,n,o],stroke:"black",strokeWidth:6,name:"mainLine"});r.add(a);const l=new Konva.Line({points:[e,t,n,o],stroke:"rgba(0, 0, 255, 0.5)",strokeWidth:10,lineCap:"round",lineJoin:"round",visible:!1,name:"boundingBox"});r.add(l),l.moveToBottom();const s=new Konva.Circle({x:e,y:t,radius:8,fill:"red",draggable:!0,visible:!1,name:"startAnchor"}),c=new Konva.Circle({x:n,y:o,radius:8,fill:"red",draggable:!0,visible:!1,name:"endAnchor"});r.add(s),r.add(c);function d(){const e=[s.x(),s.y(),c.x(),c.y()];a.points(e),l.points(e),contentLayer.draw()}function u(e){return{x:snapToGrid(e.x,gridSize),y:snapToGrid(e.y,gridSize)}}contentLayer.add(r),contentLayer.draw(),a.on("mouseenter",(()=>{"addDirectionArea"!==currentMode&&(l.visible(!0),contentLayer.draw())})),a.on("mouseleave",(()=>{"addDirectionArea"!==currentMode&&(s.visible()||(l.visible(!1),contentLayer.draw()))})),a.on("click",(e=>{"addDirectionArea"!==currentMode&&(e.cancelBubble=!0,"addLineLabel"!==currentMode?"select"===currentMode&&(selectedLineGroup=r,r.moveToTop(),l.visible(!0),s.visible(!0),c.visible(!0),contentLayer.draw(),stage.setAttr("clickedOnLine",!0)):addLabelToLine(a))})),s.on("dragmove",(function(){this.position(u(this.position())),d()})),c.on("dragmove",(function(){this.position(u(this.position())),d()})),r.on("dragmove",(function(){if("addDirectionArea"===currentMode)return;const e=u(r.position());r.position(e),d()})),stage.on("click",(e=>{e.target!==a&&e.target!==s&&e.target!==c&&(l.visible(!1),s.visible(!1),c.visible(!1),selectedLineGroup=null,contentLayer.draw())}))}function getLineCoordinates(e){const t=e.points(),n=e.getParent(),o=n?n.getAbsolutePosition():{x:0,y:0},i=[];for(let e=0;e<t.length;e+=2)i.push(t[e]+o.x),i.push(t[e+1]+o.y);return i}let isAddingLabels=!1,lineLabelMap=new Map,linesWithLabels=[];function addLabelToLine(e){if(lineLabelMap.has(e.getParent().id()))return;const t=`label-${Date.now()}-${Math.random()}`,n=new Konva.Group({draggable:!0,name:"labelGroup",id:t}),o=e.getParent(),i=getLineCoordinates(e),r=(i[0]+i[2])/2,a=(i[1]+i[3])/2,l=new Konva.Text({text:"Подпись",x:0,y:0,fontSize:30,fontFamily:"Times New Roman",fill:"black",draggable:!0,name:"selectable"}),s=new Konva.Rect({x:l.x(),y:l.y(),width:l.width(),height:l.height(),stroke:"blue",strokeWidth:1,visible:!1});l.on("click",(()=>{selectedLabelGroup=l.getParent(),contentLayer.draw()})),l.on("textChange",(()=>{s.width(l.width()),s.height(l.height())})),l.on("dragmove",(()=>{s.position(l.position()),contentLayer.batchDraw()})),n.position({x:r,y:a}),l.on("mouseenter",(()=>{s.visible(!0),contentLayer.batchDraw()})),l.on("mouseleave",(()=>{s.visible(!1),contentLayer.batchDraw()})),l.on("dblclick dbltap",(()=>{l.hide(),contentLayer.draw();const t=l.absolutePosition(),o=stage.container(),i=o.offsetLeft+t.x,r=o.offsetTop-6+t.y,a=document.createElement("textarea");document.body.appendChild(a),a.value=l.text(),a.style.position="absolute",a.style.top=`${r}px`,a.style.left=`${i}px`,a.style.width=l.width()-2*l.padding()+100+"px",a.style.height=l.height()-2*l.padding()+10+"px",a.style.fontSize=`${l.fontSize()}px`,a.style.fontFamily=l.fontFamily(),a.style.color=l.fill(),a.style.border="none",a.style.background="none",a.style.outline="none",a.style.overflow="hidden",a.style.padding="0px",a.style.margin="0px",a.style.resize="none",a.style.zIndex="1000",a.focus(),a.select();let s=!1;function c(){if(s)return;s=!0,document.body.removeChild(a);const t=a.value.trim();""===t?(n.destroy(),lineLabelMap.delete(e.getParent().id()),clearSelection()):(l.text(t),l.show()),contentLayer.draw()}a.addEventListener("blur",c),a.addEventListener("keydown",(e=>{"Enter"!==e.key||e.shiftKey||c()}))})),n.add(s),n.add(l),contentLayer.add(n),lineLabelMap.set(o.id(),n.id()),contentLayer.draw()}stage.on("click",(e=>{if(e.target===stage||e.target===contentLayer)return stage.getAttr("clickedOnLine")&&selectedLineGroup&&(stage.setAttr("clickedOnLine",!1),selectedLineGroup.findOne(".boundingBox").visible(!1),selectedLineGroup.findOne(".startAnchor").visible(!1),selectedLineGroup.findOne(".endAnchor").visible(!1),selectedLineGroup=null,contentLayer.draw()),void clearSelection()}));let startX,startY,isDrawingPolyline=!1,polylinePoints=[];function startDrawingPolyline(){cancelPolylineDrawing(),isDrawingPolyline=!0,polylinePoints=[],polyline=new Konva.Line({points:[],stroke:"black",strokeWidth:2,lineJoin:"round",closed:!1,draggable:!1}),contentLayer.add(polyline),contentLayer.draw(),stage.on("mousedown",onPolylineMouseDown),stage.on("mousemove",onPolylineMouseMove),stage.on("dblclick",finishPolyline)}function onPolylineMouseDown(e){if(!isDrawingPolyline)return;const t=stage.getPointerPosition(),n=snapToGrid(t.x,gridSize),o=snapToGrid(t.y,gridSize);if(0===polylinePoints.length)startX=n,startY=o;else{if(Math.hypot(n-startX,o-startY)<gridSize)return void finishPolyline()}polylinePoints.push(n,o),polyline.points(polylinePoints),contentLayer.draw()}function onPolylineMouseMove(e){if(!isDrawingPolyline||0===polylinePoints.length)return;const t=stage.getPointerPosition(),n=snapToGrid(t.x,gridSize),o=snapToGrid(t.y,gridSize),i=polylinePoints.slice().concat([n,o]);polyline.points(i),contentLayer.draw()}function cancelPolylineDrawing(){isDrawingPolyline&&(isDrawingPolyline=!1,polyline&&(polyline.destroy(),contentLayer.draw()),stage.off("mousedown",onPolylineMouseDown),stage.off("mousemove",onPolylineMouseMove),stage.off("dblclick",finishPolyline))}function arePointsCollinear(e,t,n){return(t.y-e.y)*(n.x-t.x)==(n.y-t.y)*(t.x-e.x)}function arrayToDict(e){const t=[];for(let n=0;n<e.length-1;n+=2)t.push({x:e[n],y:e[n+1]});return t}function dictToArray(e){return e.map((e=>[e.x,e.y])).flat()}function simplifyPolyline(e){let t=arrayToDict(e);if(t.length<3)return dictToArray(t);let n=[t[0]];for(let e=1;e<t.length-1;e++){let o=n[n.length-1],i=t[e];arePointsCollinear(o,i,t[e+1])||n.push(i)}if(n.push(t[t.length-1]),n.length>2){let e=n[n.length-1],t=n[n.length-2];arePointsCollinear(n[0],t,e)&&n.pop()}return dictToArray(n)}function finishPolyline(){if(!isDrawingPolyline)return;polylinePoints=simplifyPolyline(polylinePoints),polylinePoints=arrayToDict(polylinePoints);const e=stage.getPointerPosition(),t=snapToGrid(e.x,gridSize),n=snapToGrid(e.y,gridSize),o=Math.hypot(t-polylinePoints[0].x,n-polylinePoints[0].y)<gridSize,i=polylinePoints[0];if(polylinePoints.length>2){const e=polylinePoints[1];arePointsCollinear(polylinePoints[polylinePoints.length-1],i,e)&&polylinePoints.shift()}if(polylinePoints=dictToArray(polylinePoints),isDrawingPolyline=!1,stage.off("mousedown",onPolylineMouseDown),stage.off("mousemove",onPolylineMouseMove),stage.off("dblclick",finishPolyline),polyline.destroy(),o)for(let e=0;e<polylinePoints.length;e+=2){addEditableLine(polylinePoints[e],polylinePoints[e+1],polylinePoints[(e+2)%polylinePoints.length],polylinePoints[(e+3)%polylinePoints.length])}else{for(let e=0;e<polylinePoints.length-2;e+=2){const[t,n,o,i]=[polylinePoints[e],polylinePoints[e+1],polylinePoints[e+2],polylinePoints[e+3]];addEditableLine(t,n,o,i)}contentLayer.draw()}setMode("select"),setActiveButton(selectToolButton)}const transformer=new Konva.Transformer({ignoreStroke:!1,rotateEnabled:!1,enabledAnchors:[]});function setMode(e){currentMode=e,stage.container().style.cursor="drawPolyLine"===e?"crosshair":"default","addDirectionArea"===e?(cancelPolylineDrawing(),clearSelection(),selectedLines=[],contentLayer.draw()):"drawPolyLine"===e?(clearSelection(),selectedLines=[],contourLayer.clear(),clearContourLayer()):"addLineLabel"===e&&(cancelPolylineDrawing(),clearSelection(),selectedLines=[],contourLayer.clear(),clearContourLayer()),"select"===e?(cancelPolylineDrawing(),enableSelectionMode(),contourLayer.clear(),clearContourLayer()):disableSelectionMode()}contentLayer.add(transformer);let newContourPoints=[],isDrawingContour=!1,contourCoordinates={},contourLayer=new Konva.Layer;function startDrawingContour(){isDrawingContour=!0,newContourPoints=[],contourCoordinates={},contourLayer.clear(),contourLayer.draw()}function addContourPoint(e,t){const n=newContourPoints.length+1,o=`point${newContourPoints.length+1}`;contourCoordinates[o]={x:e,y:t},newContourPoints.push({x:e,y:t});const i=new Konva.Circle({x:e,y:t,radius:8,fill:"green",stroke:"black",strokeWidth:1,name:`contourPoint_${newContourPoints.length}`});contourLayer.add(i);const r=new Konva.Text({x:e+10,y:t-10,text:n.toString(),fontSize:24,fontFamily:"Times New Roman",fill:"red",name:`pointLabel_${n}`});if(contourLayer.add(r),newContourPoints.length>1){drawLineBetweenPoints(newContourPoints[newContourPoints.length-2],{x:e,y:t})}i.moveToTop(),r.moveToTop(),contourLayer.draw()}function drawLineBetweenPoints(e,t){const n=new Konva.Line({points:[e.x,e.y,t.x,t.y],stroke:"blue",strokeWidth:6,name:"contourLine"});contourLayer.add(n),n.moveToBottom()}function drawClosedContour(){const e=newContourPoints[0];drawLineBetweenPoints(newContourPoints[newContourPoints.length-1],e),contourLayer.draw(),linesWithLabels=generateLineArray(newContourPoints,lineLabelMap)}function isPointOnGridIntersection(e,t){const n=snapToGrid(e,gridSize),o=snapToGrid(t,gridSize);for(const e of contentLayer.find(".mainLine"))for(const t of contentLayer.find(".mainLine")){if(e===t)continue;const i=findLineIntersection(e,t);if(i){const{x:e,y:t}=i;if(snapToGrid(e,gridSize)===n&&snapToGrid(t,gridSize)===o)return{x:n,y:o}}}return null}function findLineIntersection(e,t){const[n,o,i,r]=e.points(),[a,l,s,c]=t.points(),d=(n-i)*(l-c)-(o-r)*(a-s);if(0===d)return null;return{x:((n*r-o*i)*(a-s)-(n-i)*(a*c-l*s))/d,y:((n*r-o*i)*(l-c)-(o-r)*(a*c-l*s))/d}}function clearContourLayer(){contourLayer.destroyChildren(),newContourPoints=[],contourCoordinates={},isDrawingContour=!1,contourLayer.draw()}function isSamePoint(e,t){return e.x===t.x&&e.y===t.y}function generateLineArray(e,t){const n=[];for(let o=0;o<e.length;o++){const i=e[o],r=e[(o+1)%e.length];let a=null;if(t.forEach(((e,t)=>{const n=contentLayer.findOne(`#${t}`);if(!n)return;const o=n.findOne(".mainLine");if(!o)return;const l=o.points(),s={x:l[0],y:l[1]},c={x:l[2],y:l[3]};(isSamePoint(i,s)&&isSamePoint(r,c)||isSamePoint(i,c)&&isSamePoint(r,s))&&(a=n)})),a){const e=contentLayer.findOne(`#${t.get(a.id())}`),o=e?.findOne("Text")?.text();n.push({point1:i,point2:r,label_obj:o?parseFloat(o):null})}}return n}function enableSelectionMode(){stage.on("mousedown",startSelection),stage.on("mousemove",updateSelection),stage.on("mouseup",endSelection)}function disableSelectionMode(){stage.off("mousedown",startSelection),stage.off("mousemove",updateSelection),stage.off("mouseup",endSelection)}stage.add(contourLayer),stage.on("click",(e=>{if(!isDrawingContour)return;const t=stage.getPointerPosition(),{x:n,y:o}=t,i=isPointOnGridIntersection(n,o);if(i){const e=newContourPoints.some((e=>e.x===i.x&&e.y===i.y));if(newContourPoints.length>0&&newContourPoints[0].x===i.x&&newContourPoints[0].y===i.y)return drawClosedContour(),void(isDrawingContour=!1);if(e)return;if(newContourPoints.length>0){const e=newContourPoints[0],t=5;if(Math.abs(i.x-e.x)<=t&&Math.abs(i.y-e.y)<=t)return drawClosedContour(),void(isDrawingContour=!1)}addContourPoint(i.x,i.y)}})),stage.on("dblclick",(e=>{isDrawingContour&&newContourPoints.length>2&&(drawClosedContour(),isDrawingContour=!1)}));let selectionRect=new Konva.Rect({fill:"rgba(0,0,255,0.1)",visible:!1});contentLayer.add(selectionRect);let selectionStart={x:0,y:0},selectedShapes=[];function startSelection(e){if("select"!==currentMode)return;const t=stage.getPointerPosition();selectionStart.x=t.x,selectionStart.y=t.y,selectionRect.setAttrs({x:t.x,y:t.y,width:0,height:0,visible:!0}),contentLayer.draw()}function updateSelection(e){if(!selectionRect.visible())return;const t=stage.getPointerPosition();selectionRect.setAttrs({x:Math.min(selectionStart.x,t.x),y:Math.min(selectionStart.y,t.y),width:Math.abs(t.x-selectionStart.x),height:Math.abs(t.y-selectionStart.y)}),contentLayer.batchDraw()}function endSelection(){if(!selectionRect.visible())return;setTimeout((()=>{selectionRect.visible(!1),contentLayer.batchDraw()}));const e=selectionRect.getClientRect(),t=contentLayer.find(".selectable");selectedShapes=t.filter((t=>Konva.Util.haveIntersection(e,t.getClientRect()))),selectShapes(selectedShapes)}function updateSelectedObjects(){selectedShapes=transformer.nodes(),transformer.nodes(selectedShapes),contentLayer.draw()}function deleteSelectedElements(){selectedShapes.forEach((e=>{e.selectionBox&&(e.selectionBox.destroy(),e.selectionBox=null),e.destroy()})),selectedShapes=[],transformer.nodes([]),contentLayer.draw()}function clearSelection(){selectedShapes.forEach((e=>{e.draggable(!1)})),selectedShapes=[],selectedLabelGroup=null,selectedLineGroup=null,transformer.nodes([]),contentLayer.draw()}function selectShapes(e){clearSelection(),selectedShapes=e,e.forEach((e=>e.draggable(!0))),transformer.nodes(e),contentLayer.draw()}function normalizeLines(e){return e.map((e=>{const{point1:t,point2:n}=e;return t.x>n.x||t.x===n.x&&t.y>n.y?{...e,point1:n,point2:t}:e}))}function reorderLinesAndAddLengths(e){const t=new Set;e.forEach((e=>{t.add(`${e.point1.x},${e.point1.y}`),t.add(`${e.point2.x},${e.point2.y}`)}));const n=Array.from(t).map((e=>{const[t,n]=e.split(",").map(Number);return{x:t,y:n}})),o=n.reduce(((e,t)=>({x:e.x+t.x/n.length,y:e.y+t.y/n.length})),{x:0,y:0}),i=e=>Math.atan2(e.y-o.y,e.x-o.x);n.sort(((e,t)=>i(e)-i(t)));const r=[];for(let t=0;t<n.length;t++){const o=n[t],i=n[(t+1)%n.length],a=e.find((e=>e.point1.x===o.x&&e.point1.y===o.y&&e.point2.x===i.x&&e.point2.y===i.y||e.point2.x===o.x&&e.point2.y===o.y&&e.point1.x===i.x&&e.point1.y===i.y)),l=a?.label_obj||0;r.push({point1:o,point2:i,label_obj:l})}return r.forEach((e=>{const t=e.point2.x-e.point1.x,n=e.point2.y-e.point1.y;e.length=Math.sqrt(t*t+n*n)})),r}function getLinesWithLabels(){return lineLabelMap.forEach(((e,t)=>{const n=contentLayer.findOne(`#${t}`).findOne(".mainLine"),o=contentLayer.findOne(`#${e}`);if(n&&o){const e=n.points(),t=o.findOne("Text");linesWithLabels.push({point1:{x:e[0],y:e[1]},point2:{x:e[2],y:e[3]},label_obj:parseFloat(t.text().replace(",","."))})}})),linesWithLabels=normalizeLines(linesWithLabels),linesWithLabels=reorderLinesAndAddLengths(linesWithLabels),linesWithLabels}function calculateAreaFromScene(){if("addDirectionArea"===currentMode&&linesWithLabels.length>0){const e=linesWithLabels.map((e=>e.label_obj));vertices=linesWithLabels.map((e=>e.point1));const t=(calculatePolygonAreaWithRealDimensions(vertices,e)/1e6).toFixed(2);return inputArea.value=t,current_area=t,console.log("Площадь фигуры:",t),linesWithLabels=[],currentMode="select",setMode(currentMode),setActiveButton(selectToolButton),t}{linesWithLabels=getLinesWithLabels();const e=linesWithLabels.map((e=>e.label_obj));vertices=linesWithLabels.map((e=>e.point1));const t=(calculatePolygonAreaWithRealDimensions(vertices,e)/1e6).toFixed(2);return inputArea.value=t,current_area=t,console.log("Площадь фигуры:",t),linesWithLabels=[],t}}function calculatePolygonAreaWithRealDimensions(e,t){let n=[],o=[];for(let t=0;t<e.length;t++){const o=e[t],i=e[(t+1)%e.length],r=Math.sqrt(Math.pow(i.x-o.x,2)+Math.pow(i.y-o.y,2));n.push(r)}o.push({x:0,y:0});for(let i=1;i<e.length;i++){const r=n[i-1],a=t[i-1]/r,l=o[i-1],s=e[i],c=e[i-1],d=s.x-c.x,u=s.y-c.y,y=l.x+d*a,p=l.y+u*a;o.push({x:y,y:p})}let i=0;for(let e=0;e<o.length;e++){const t=o[e],n=o[(e+1)%o.length];i+=t.x*n.y-n.x*t.y}return Math.abs(i/2)}function saveScene(){gridLayer.setAttr("gridSize",gridSize);return{gridLayer:JSON.parse(gridLayer.toJSON()),contentLayer:JSON.parse(contentLayer.toJSON()),lineLabelMap:Array.from(lineLabelMap.entries()).map((([e,t])=>({lineId:e,labelId:t})))}}function getCSRFToken(){let e=null;const t=document.cookie.split(";");for(let n=0;n<t.length;n++){const o=t[n].trim();if("csrftoken="===o.substring(0,10)){e=decodeURIComponent(o.substring(10));break}}return e}window.addEventListener("keydown",(e=>{if("Delete"===e.key){if("select"===currentMode)if(selectedLabelGroup){const e=Array.from(lineLabelMap.entries()).find((([e,t])=>t===selectedLabelGroup.id()))?.[0];if(!e)return;lineLabelMap.delete(e),selectedLabelGroup.destroy(),clearSelection(),contentLayer.draw()}else if(selectedLineGroup){const e=lineLabelMap.get(selectedLineGroup.id());if(e){contentLayer.findOne(`#${e}`).destroy()}lineLabelMap.delete(selectedLineGroup.id()),selectedLineGroup.destroy(),selectedLineGroup=null,clearSelection(),contentLayer.draw()}else deleteSelectedElements()}else"Escape"===e.key&&("addLineLabel"===currentMode||"drawPolyLine"===currentMode?(cancelPolylineDrawing(),currentMode="select",setMode(currentMode),setActiveButton(selectToolButton)):"addDirectionArea"===currentMode&&(clearSelection(),currentMode="select",setMode(currentMode),setActiveButton(selectToolButton)))})),contentLayer.on("dragmove",(function(){if(selectedShapes.length>1){const{x:e,y:t}=selectedShapes[0].position();selectedShapes.forEach(((n,o)=>{if(o>0){const o=n.x()-selectedShapes[0].x(),i=n.y()-selectedShapes[0].y();n.position({x:e+o,y:t+i})}})),contentLayer.batchDraw()}}));const confirmActionButton=document.getElementById("confirmAction"),confirmationModal=new bootstrap.Modal(document.getElementById("confirmModal")),warningModal=new bootstrap.Modal(document.getElementById("warningModal"));function sendCroppedImageToServer(){if(current_area=inputArea.value,!current_area)return void warningModal.show();let e=stage.toDataURL({mimeType:"image/png",quality:1,pixelRatio:1}),t=saveScene();const n=document.getElementById("categorySelect"),o=getCSRFToken();e=e.replace(/^data:image\/(png|jpeg);base64,/,""),fetch("/upload-image",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":o},body:JSON.stringify({image:e,area:parseFloat(inputArea.value),status:"available",fabrictype_id:parseInt(n.value),fabricview_id:parseInt(document.getElementById("viewSelect").value),canvas_data:t})}).then((e=>e.json())).then((e=>{e.redirect_url?window.location.href=e.redirect_url:e.error&&console.error(e.error),console.log("Success:",e)})).catch((e=>console.error("Error:",e)))}confirmActionButton.addEventListener("click",(function(){confirmationModal.hide(),sendCroppedImageToServer()})),document.getElementById("saveData").addEventListener("click",(function(){confirmationModal.show()})),drawPol.addEventListener("click",startDrawingPolyline),saveDataButton.addEventListener("click",saveScene),setMode(currentMode),setActiveButton(selectToolButton),calculateAreaButton.addEventListener("click",calculateAreaFromScene);